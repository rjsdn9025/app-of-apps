# apiVersion: argoproj.io/v1alpha1
# kind: Rollout
# metadata:
#   name: {{ .Values.appName }}  # backend-deployment
# spec:
#   replicas: {{ .Values.replicaCount }}  # 1 replicas
#   revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit | default 1 }}  # 기본값으로 1 설정
#   selector:
#     matchLabels:
#       app: {{ .Values.appName }}  # backend
#   strategy:
#     canary:
#       canaryService: {{ .Values.appName }}-canary  # Canary 서비스
#       stableService: {{ .Values.appName }}-stable  # Stable 서비스
#       trafficRouting:
#         istio:
#           virtualService:
#             name: frontend-backend-routing.istio-ingress.svc.cluster.local # VirtualService 이름
#             routes:
#             - backend-route  # VirtualService 내의 경로
#       steps:
#       - setWeight: 50
#       - pause:
#           duration: 100m  # 10분 동안 일시 정지
#   template:
#     metadata:
#       labels:
#         app: {{ .Values.appName }}  # backend
#         version: stable  # Canary 버전 구분 라벨 추가
#     spec:
#       containers:
#       - name: nginx
#         image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
#         imagePullPolicy: {{ .Values.image.pullPolicy | default "Always" }}  # 기본값 Always
#         ports:
#         - containerPort: 80
#         livenessProbe:
#           tcpSocket:
#             port: 5000
#           initialDelaySeconds: 4
#           periodSeconds: 10
#           failureThreshold: 3
#           timeoutSeconds: 3
#         readinessProbe:
#           tcpSocket:
#             port: 5000
#           initialDelaySeconds: 4
#           periodSeconds: 10
#           failureThreshold: 6
#           timeoutSeconds: 3
#         startupProbe:
#           tcpSocket:
#             port: 5000
#           initialDelaySeconds: 2
#           periodSeconds: 3
#           failureThreshold: 10
#           timeoutSeconds: 1
#         env:
#         - name: DB_HOST
#           value: {{ .Values.env.DB_HOST }}
#         - name: DB_USER
#           value: {{ .Values.env.DB_USER }}
#         - name: DB_PASSWORD
#           value: {{ .Values.env.DB_PASSWORD }}
#         - name: DB_NAME
#           value: {{ .Values.env.DB_NAME }}
#         - name: AWS_REGION
#           value: {{ .Values.env.AWS_REGION }}
#         - name: COGNITO_CLIENT_ID
#           value: {{ .Values.env.COGNITO_CLIENT_ID }}
#         - name: COGNITO_USER_POOL_ID
#           value: {{ .Values.env.COGNITO_USER_POOL_ID }}
#         resources:
#           requests:
#             memory: "128Mi"
#             cpu: "250m"
#           limits:
#             memory: "256Mi"
#             cpu: "500m"
####### 잘 작동하는 버전########

apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ .Values.appName }}  # backend-deployment
spec:
  replicas: {{ .Values.replicaCount }}  # 1 replicas
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit | default 1 }}  # 기본값으로 1 설정
  selector:
    matchLabels:
      app: {{ .Values.appName }}  # backend
  strategy:
    canary:
      trafficRouting:
        istio:
          virtualService:
            name: frontend-backend-routing.istio-system.svc.cluster.local # VirtualService 이름
            routes:
            - backend-route  # VirtualService 내의 경로
          destinationRule:
            name: rollout-destrule    # required
            canarySubsetName: canary  # required
            stableSubsetName: stable  # required
      steps:
      - setWeight: 20
      - pause:
          duration: 100m  # 10분 동안 일시 정지
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}  
        version: stable # Canary 버전 구분 라벨 추가
      containers:
      - name: nginx
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy | default "Always" }}  # 기본값 Always
        ports:
        - containerPort: 80
        livenessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 4
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 3
        readinessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 4
          periodSeconds: 10
          failureThreshold: 6
          timeoutSeconds: 3
        startupProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 2
          periodSeconds: 3
          failureThreshold: 10
          timeoutSeconds: 1
        env:
        - name: DB_HOST
          value: {{ .Values.env.DB_HOST }}
        - name: DB_USER
          value: {{ .Values.env.DB_USER }}
        - name: DB_PASSWORD
          value: {{ .Values.env.DB_PASSWORD }}
        - name: DB_NAME
          value: {{ .Values.env.DB_NAME }}
        - name: AWS_REGION
          value: {{ .Values.env.AWS_REGION }}
        - name: COGNITO_CLIENT_ID
          value: {{ .Values.env.COGNITO_CLIENT_ID }}
        - name: COGNITO_USER_POOL_ID
          value: {{ .Values.env.COGNITO_USER_POOL_ID }}
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"